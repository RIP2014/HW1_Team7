1.1
Two planners were tested: Blackbox and FastForward. Blackbox will attempt to solve a problem 
by utilizing a variety of solvers, moving between its options when it detects one is not 
working effectively. Both use Graphplan as a primary solver, which constructs a noded graph of 
states linked by actions to locate a plan to reach the solution. FF doesn't utilize a variety 
of solvers, but makes up for this with its hill-climbing algorithm for estimating the number 
of steps needed to solve a problem.
1.2
FastForward was the faster of the two.
1.3
Blackbox wastes time attempting to solve problems using fewer moves than the minimum number 
required. The Tower's of Hanoi format makes it easy for FF to estimate the number of moves it 
will need to solve the problem.

4.1
The output is in file Question4-1Output.txt.
4.2
FF quickly determined the favorability of the largest disk being on the target peg and 
prioritized it in its search, and upon finding it disregarding actions that would disrupt this 
state. As the towers of hanoi allow you to ignore the largest disks once they are in the 
correct positions, this was an ideal optimization from it. It then looked for how to get the 
11th disk onto the 12th, and so on.
4.3
The recursive solution to the towers of hanoi suggests the way to get a stack of discs from A 
to C is to first move all but the bottom one to B, then to move the bottom to C, then move the 
ones on B to C. To move the all but the bottom disc to B, apply the recursive solution again, 
substituting B for C.
