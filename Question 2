To briefly explain pathfinding through potential field navigation, the titular "potential field" represents a field created by both obstacles and the goal which guides the bot through the area. Obstacles, in addition to being impossible for the bot to traverse, have a field around them which repells the bot, guiding it away from individual obstacles and clusters of them. The goal, on the other hand, provides a constant attraction to the bot, guiding it forward. Working together with the obstacles repelling the bot, this can be viewed similarly to sliding down a hill, where the obstacles are very tall and have slopes around their base. The bot merely follows the path of least resistance. It is not a complete algorithm, however. In addition to depending on knowledge of the environment to determine where to establish the fields, it is possible for the bot to become stuck at local minima. Convex configurations of obstacles can create points where there is no way to escape in a downward direction, which will cause the greedy path of least resistance dependence to never reach the actual lowest point at the goal. 

The video demonstrates both a success and a failure. In the successful attempt, it navigated around two circles in a layout identical to layout 1 used in the bug algorithms. It achieved an actual:euclidean distance ratio of 1.2749885, significantly better than bug 2 in this setup. In the failed attempt, two circles overlapped between the bot and the goal, creating a notch that the bot was caught by. Either bug algorithm could have solved that layout easily, but it serves to show the weakness of potential field mapping.

Video Demonstration: https://www.youtube.com/watch?v=ziX1Zsia0GU
Video Download Link: http://www.mediafire.com/watch/84h2xrhll8s1x9n/potential_field_algorithm.wmv

Video Screenshots: http://i.imgur.com/SYwtJIA.png, http://i.imgur.com/iQnyqWE.png
